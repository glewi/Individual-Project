using PlotterConversionSystem.TokenDefinitions;

namespace PlotterConversionSystem.Frontends
{
    /// <summary>
    /// The interface that is to be implemented by the
    /// </summary>
    public interface IFrontend
    {
        /// <summary>
        /// The method that accepts a file path as input and returns the statements
        /// from said file as a string array.
        /// </summary>
        /// <param name="input"> The path of the file that is to be read. </param>
        /// <returns>  A string array of each statement in the file/ </returns>
        string[] Read(string input);

        /// <summary>
        /// The method that accepts a string array of program staements and performs lexical analysis
        /// that creates and returns a string of generated ITokens.
        /// </summary>
        /// <param name="tokens"> The statements to lex. </param>
        /// <returns> The IToken array representation of these statements. </returns>
        IToken[] Lex(string[] tokens);

        /// <summary>
        /// The parser is responsible for serialising the IToken array generated by the lexical analyser.
        /// </summary>
        /// <param name="tokens"> The token array generated by the Lex method. </param>
        void Parse(IToken[] tokens);
    }
}
